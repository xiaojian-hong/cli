name: release

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
jobs:
  # build-linux:
  #   name: Build Linux binaries
  #   runs-on: ubuntu-latest
  #   env:
  #     GOVER: 1.19
  #   steps:
  #     - name: Set up Go ${{ env.GOVER }}
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ${{ env.GOVER }}
  #     - name: Check out code
  #       uses: actions/checkout@v2
  #     - name: Run go mod tidy
  #       run: go mod tidy
  #     - name: build & archive binaries
  #       run: |
  #         curl https://wasmtime.dev/install.sh -sSf | bash
  #         curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v 0.11.0
  #         source $HOME/.wasmedge/env
  #         wasmedge -v
  #         make archive-release-linux-amd64
  #     - name: upload artifacts
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: yomo-artifact
  #         path: ./bin/**/*
  # build-darwin:
  #   name: Build MacOS binaries
  #   runs-on: macos-latest
  #   env:
  #     GOVER: 1.19
  #   steps:
  #     - name: Set up Go ${{ env.GOVER }}
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ${{ env.GOVER }}
  #     - name: Check out code
  #       uses: actions/checkout@v2
  #     - name: Run go mod tidy
  #       run: go mod tidy
  #     - name: build & archive binaries
  #       run: |
  #         curl https://wasmtime.dev/install.sh -sSf | bash
  #         curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v 0.11.0
  #         source $HOME/.wasmedge/env
  #         wasmedge -v
  #         make archive-release-darwin-amd64
  #     - name: upload artifacts
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: yomo-artifact
  #         path: ./bin/**/*
  build-windows:
    name: Build Windows binaries
    runs-on: windows-latest
    env:
      GOVER: 1.19
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code
        uses: actions/checkout@v2
      - name: Run go mod tidy
        run: go mod tidy
      # - name: winget
      #   shell: powershell
      #   run: |
      #     $ErrorActionPreference = 'Stop'

      #     iwr $(iwr 'https://store.rg-adguard.net/api/GetFiles' -Method 'POST' -ContentType 'application/x-www-form-urlencoded' -Body 'type=PackageFamilyName&url=Microsoft.VCLibs.140.00_8wekyb3d8bbwe&ring=RP&lang=en-US' -UseBasicParsing | Foreach-Object Links | Where-Object outerHTML -match 'Microsoft.VCLibs.140.00_.+_x64__8wekyb3d8bbwe.appx' | Foreach-Object href) -OutFile $env:TEMP\vclibs.appx
      #     iwr $(iwr 'https://store.rg-adguard.net/api/GetFiles' -Method 'POST' -ContentType 'application/x-www-form-urlencoded' -Body 'type=PackageFamilyName&url=Microsoft.VCLibs.140.00.UWPDesktop_8wekyb3d8bbwe&ring=RP&lang=en-US' -UseBasicParsing | Foreach-Object Links | Where-Object outerHTML -match 'Microsoft.VCLibs.140.00.UWPDesktop_.+_x64__8wekyb3d8bbwe.appx' | Foreach-Object href) -OutFile $env:TEMP\vclibsuwp.appx
      #     iwr 'https://github.com/microsoft/winget-cli/releases/download/v1.1.12653/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle' -OutFile $env:TEMP\winget.msixbundle
      #     iwr 'https://github.com/microsoft/winget-cli/releases/download/v1.1.12653/9c0fe2ce7f8e410eb4a8f417de74517e_License1.xml' -Outfile $env:TEMP\winget.license

      #     Add-AppxProvisionedPackage -Online -PackagePath $env:TEMP\winget.msixbundle -LicensePath $env:TEMP\winget.license -DependencyPackagePath @("$env:TEMP\vclibs.appx", "$env:TEMP\vclibsuwp.appx")
      - name: build & archive binaries
        run: |
          curl --progress-bar --show-error --location --fail https://github.com/bytecodealliance/wasmtime/releases/download/v0.40.1/wasmtime-v0.40.1-x86_64-windows.msi --output $env:TEMP\wasmtime-v0.40.1-x86_64-windows.msi
          Start-Process -Wait -FilePath msiexec -ArgumentList /i, "$env:TEMP\wasmtime-v0.40.1-x86_64-windows.msi", /quiet, /qn, /norestart, /L*V, "$env:TEMP\wasmtime.log"          
          curl --progress-bar --show-error --location --fail https://github.com/WasmEdge/WasmEdge/releases/download/0.11.0/WasmEdge-0.11.0-windows.msi --output $env:TEMP\WasmEdge-0.11.0-windows.msi
          Start-Process -Wait -FilePath msiexec -ArgumentList /i, "$env:TEMP\WasmEdge-0.11.0-windows.msi", /quiet, /qn, /norestart, /L*V, "$env:TEMP\wasmedge.log"
          echo "C:\Program Files\Wasmtime\bin\" >> $GITHUB_PATH
          echo "C:\Program Files\WasmEdge\bin\" >> $GITHUB_PATH
          ls "C:\Program Files\WasmEdge\bin\"
          wasmedge -v
          go build -o bin/yomo.exe -ldflags "-s -w" ./yomo/main.go
          tar -C ./bin -czf bin/yomo-v0.0.9-x86_64-Windows.tar.gz yomo.exe
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: yomo-artifact
          path: ./bin/**/*
  publish:
    name: Publish binaries
    # needs: [build-linux, build-darwin, build-windows]
    needs: [build-windows]
    env:
      ARTIFACT_DIR: ./release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: download artifacts
        uses: actions/download-artifact@master
        with:
          name: yomo-artifact
          path: ${{ env.ARTIFACT_DIR }}
      - name: lists artifacts
        run: ls -l ${{ env.ARTIFACT_DIR }}
      - name: build version
        run: make cli_version
      - name: Get version
        id: tag
        run: echo ::set-output name=version::$(cat ./VERSION)
      - name: publish binaries to github
        run: |
          echo "installing github-release-cli..."
          sudo npm install --silent --no-progress -g github-release-cli@1.3.1

          # Get the list of files
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)

          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"

          export GITHUB_TOKEN=${{ secrets.YOMO_BOT_TOKEN }}
          echo "Uploading YoMo Binaries to GitHub Release"
          github-release upload \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "${{ steps.tag.outputs.version }}" \
            --name "${{ steps.tag.outputs.version }}" \
            --prerelease true \
            ${RELEASE_ARTIFACT[*]}
      # - name: Dispatch release notification
      #   uses: peter-evans/repository-dispatch@v2
      #   with:
      #     token: ${{ secrets.YOMO_BOT_TOKEN }}
      #     repository: yomorun/get.yomo.run
      #     event-type: cli-released
      #     client-payload: '{"version": "${{ steps.tag.outputs.version }}"}'
